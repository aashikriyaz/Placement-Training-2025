141.Linked List cycle (java)

public class Solution {
    public boolean hasCycle(ListNode head) {

    ListNode slow = head;
    ListNode fast = head;

    while(fast !=  null && fast.next != null){
        slow = slow.next;
        fast= fast.next.next;

        if(slow==fast)
        return true;
    }   
        
        return false;
    }
}

435.Non overlapping intervals (java)
class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        Arrays.sort(intervals,(a,b)->Integer.compare(a[1],b[1]));
        int prev = intervals[0][1];
        int count = 0;
        for(int i=1;i<intervals.length;i++){
            if(intervals[i][0]<prev){
                count ++;
            }
            else 
            prev = intervals[i][1];

        }
        return count ;
        
    }
}
