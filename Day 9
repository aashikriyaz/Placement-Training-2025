leetcode quest 141.Linked List cycle (java)

public class Solution {
    public boolean hasCycle(ListNode head) {

    ListNode slow = head;
    ListNode fast = head;

    while(fast !=  null && fast.next != null){
        slow = slow.next;
        fast= fast.next.next;

        if(slow==fast)
        return true;
    }   
        
        return false;
    }
}

435.leetcode quest ..Non overlapping intervals (java) 
class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        Arrays.sort(intervals,(a,b)->Integer.compare(a[1],b[1]));
        int prev = intervals[0][1];
        int count = 0;
        for(int i=1;i<intervals.length;i++){
            if(intervals[i][0]<prev){
                count ++;
            }
            else 
            prev = intervals[i][1];

        }
        return count ;
        
    }
}


25.reverse nodes in k group
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {

        ListNode curr = head;
        ListNode grphead = null, grptail = null, newtail = null, newhead = null;
        int count = 0;
        ListNode temp = head;

    
        while (temp != null) {
            temp = temp.next;
            count++;
        }

        while (count >= k) {
            grphead = null;
            grptail = curr;

            for (int i = 0; i < k; i++) {
                ListNode next = curr.next;
                curr.next = grphead;
                grphead = curr;
                curr = next;
            }

            if (newhead == null) {
                newhead = grphead;
                newtail = grptail;
            } else {
                newtail.next = grphead;
                newtail = grptail;
            }

            newtail.next = curr;
            count -= k;
        }

        return newhead;
    }
}
