349th leetcode question 
intersection of two arrays
easy level question !!

class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        
        unordered_set<int> set1(nums1.begin(), nums1.end()); // Step 1
        unordered_set<int> result;                           // Step 2

        for (int i : nums2) {                                // Step 3
            if (set1.count(i)) {                             // Step 4
                result.insert(i);                            // Step 5
            }
        }

        return vector<int>(result.begin(), result.end());    // Step 6
    }
};


560 subarray equals to K
medium level question 

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        map<int,int> mpp;
        mpp[0] = 1;
        int preSum =0 , cnt=0;
        for(int i=0;i<nums.size();i++){
            preSum += nums [i];
            int remove = preSum -k;
            cnt += mpp[remove];
            mpp[preSum] += 1;
        }      
        return cnt;  
    }
};

hardquestion using java
import java.util.Scanner;

public class Solution {
    public int minPatches(int[] nums, int n)
    {
   long maxNum = 0;
   int minPatch = 0;
   int i=0;
   int sz = nums.length;
   while(maxNum<n)
   {
       if(i<sz && nums[i]<=maxNum+1)
       {
           maxNum += nums[i];
           i++;
       }
       else
       {
           minPatch++;
           maxNum+=(maxNum +1);
       }
   }
   return minPatch;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int size = sc.nextInt();
        int[] nums = new int[size];
        for (int i = 0; i < size; i++) {
            nums[i] = sc.nextInt();
        }
        int n = sc.nextInt();
        Solution solution = new Solution();
        int result = solution.minPatches(nums, n);
        System.out.println(result);
        sc.close();
    }
}
