1.Leetcode 
TWo sum (c++)
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] + nums[j] == target) {
                    return {i, j};
                }
            }
        }
        return {}; 
    }
};

881.Boats to save people (c++)
class Solution {
public:
    int numRescueBoats(vector<int>& people, int limit) {
        sort(people.begin(),people.end());  // Step 1: Sort the array
        int i = 0, j = people.size() - 1, cnt = 0;  // Step 2: Two pointers and count

        while(i <= j) {  // Step 3: While people remain
            if(people[i] + people[j] <= limit){  // Case 1: Lightest + Heaviest fits
                i++;  // Take the lightest person
                j--;  // Take the heaviest person
            } else {
                j--;  // Case 2: Heaviest alone (too heavy to pair)
            }
            cnt++;  // One boat used in either case
        }

        return cnt;  // Step 4: Return total boats
    }
};



2302. leetcode (hard question)
count subarrays with score less than k
using java code
class Solution {
    public long countSubarrays(int[] nums, long k) {
        int start = 0;
        long sum = 0;
        long count = 0;
        
        for (int end = 0; end < nums.length; end++) {
            sum += nums[end];
            
            while (sum * (end - start + 1) >= k) {
                sum -= nums[start];
                start++;
            }
            
            count += (end - start + 1);
        }
        
        return count;
    }
}
