110.leetcode(Balanced binary tree)

class Solution {
    public boolean isBalanced(TreeNode root) {
        int res=dfs(root);
        if(res==-1)
        return false;
        return true;
        
    }
    int dfs(TreeNode root){
        if(root==null)return 0;
        int left =dfs(root.left);
        if(left==-1)
        return -1;
        int right=dfs(root.right);
        if(right==-1)
        return-1;
        if(Math.abs(left-right)>1)
        return-1;
        return Math.max(left,right)+1;
    }
}

968.Binary tree cameras

class Solution {
    int c = 0;

    public int minCameraCover(TreeNode root) {
        if (camera(root) == 0) {
            c++;
        }
        return c;
    }

    int camera(TreeNode node) {
        if (node == null) return -1;

        int left = camera(node.left);
        int right = camera(node.right);

        if (left == 0 || right == 0) {
            c++;
            return 1;
        }

        if (left == 1 || right == 1) {
            return -1;
        }

        return 0;
    }
}
